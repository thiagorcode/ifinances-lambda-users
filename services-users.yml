AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API de Users

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  TableUserName:
    Type: String
  TimeExpExpireSecretToken:
    Type: String
    Default: '12h'
  TimeExpExpireRefreshToken:
    Type: String
    Default: '5d'
  SecretJwt:
    Type: String
    Default: '913a0d76-7dcc-4538-b028-bc95e7933f3d'
Globals:
  Function:
    Timeout: 15
    Tracing: Active
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Layers:
      - !Ref RuntimeDependenciesLayer
  Api:
    TracingEnabled: true

Resources:
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile 
    Properties:
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Retain
  CreateUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/create.handler
      FunctionName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - create
      Environment:
        Variables:
          TABLE_NAME: !Ref TableUserName
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref TableUserName
        - DynamoDBReadPolicy:
            TableName: !Ref TableUserName
  CreateUserLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateUserFunction}
      RetentionInDays: 14

  FindByIdUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/findById.handler
      FunctionName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - find-by-id
      Environment:
        Variables:
          TABLE_NAME: !Ref TableUserName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableUserName
  FindByIdUserLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FindByIdUserFunction}
      RetentionInDays: 14

  ResetPasswordUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/resetPassword.handler
      FunctionName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - reset-password
      Environment:
        Variables:
          TABLE_NAME: !Ref TableUserName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableUserName
        - DynamoDBWritePolicy:
            TableName: !Ref TableUserName
  ResetPasswordUserLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ResetPasswordUserFunction}
      RetentionInDays: 14

  LoginFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/login.handler
      FunctionName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - login
      Environment:
        Variables:
          TABLE_NAME: !Ref TableUserName
          SECRET_JWT: !Ref SecretJwt
          TIME_EXP_SECRET_TOKEN: !Ref TimeExpExpireSecretToken
          TIME_EXP_REFRESH_TOKEN: !Ref TimeExpExpireRefreshToken
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableUserName
  # LoginLambdaLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub /aws/lambda/${LoginFunction}
  #     RetentionInDays: 14

  RefreshTokenFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/refreshToken.handler
      FunctionName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - refresh-token
      Environment:
        Variables:
          SECRET_JWT: !Ref SecretJwt
          TIME_EXP_SECRET_TOKEN: !Ref TimeExpExpireSecretToken
          TIME_EXP_REFRESH_TOKEN: !Ref TimeExpExpireRefreshToken
  RefreshTokenLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RefreshTokenFunction}
      RetentionInDays: 14

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/authorizer.handler
      FunctionName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - authorizer
      Environment:
        Variables:
          TABLE_NAME: !Ref TableUserName
          SECRET_JWT: !Ref SecretJwt
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableUserName

  AuthorizerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AuthorizerFunction}
      RetentionInDays: 14
